# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2011-2021 ETH Zurich.

name: Test and create release (when run manually)


on:
  push: # run this workflow on every push
  pull_request: # run this workflow on every pull_request
  workflow_dispatch: # allow to manually trigger this workflow
    inputs:
      type:
        type: choice
        description: 'Specifies whether a stable release, nightly release or release candidate should be triggered.'
        required: true
        default: 'nightly'
        options: 
          - stable
          - nightly
          - rc
      tag_name:
        description: 'Tag name for stable release.'
        required: true
        default: '-'
      release_name:
        description: 'Release title for stable release.'
        required: true
        default: '-'

# note that release-candidate builds are treated like 'stable' builds for now except that there is no deployment to the marketplaces in the end.
# in the future, this should be changed such that release-candidates result in a prerelease (like nightly builds).

# the following env variables configure the behavior of this workflow
# in particular, they control whether Viper-IDE is tested against certain ViperTools and a ViperServer JAR on push and pull requests
# this is particularly useful during debugging / testing as a new Viper-IDE release is not necessary for every change to the ViperServer JAR
env:
  TEST_LOCAL_ON_PUSH_PR: false
  # note that the following URL is extended with `/${{ matrix.viper-tools-zip-file }}` in the 'build-and-test' job:
  TEST_LOCAL_ON_PUSH_PR_VIPERTOOLS_URL: https://github.com/viperproject/viper-ide/releases/download/v-2022-09-21-1611
  # the following  URL is not extended and downloading the destination is expected to return the viperserver.jar:
  TEST_LOCAL_ON_PUSH_PR_VIPERSERVER_URL: https://polybox.ethz.ch/index.php/s/54sDcqHDJHelKBY/download

jobs:
  build-and-test:
    name: build-and-test - ${{ matrix.target }}
    strategy:
      # tests should not be stopped when they fail on one of the OSes:
      fail-fast: false
      matrix:
        target: ["darwin-x64", "linux-x64", "linux-x64", "linux-x64", "win32-x64"]
        include:
          - target: "darwin-x64"
            os: macos-latest
            viper-tools-zip-file: "ViperToolsMac.zip"
          - target: "darwin-arm64"
            os: ubuntu-latest # since GitHub does not have ARM macs, we can't test anyway and use Ubuntu instead for building
            viper-tools-zip-file: "ViperToolsMacARM.zip"
          - target: "linux-x64"
            os: ubuntu-latest
            viper-tools-zip-file: "ViperToolsLinux.zip"
          - target: "win32-x64"
            os: windows-latest
            viper-tools-zip-file: "ViperToolsWin.zip"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Viper-IDE
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Should match the version in client/src/test/data/vscode-version

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
      - run: java --version

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: client/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # npm ci fails to clone GitHub repos referenced in package.json with recent node versions
      # the following work around has been proposed here: https://github.com/actions/setup-node/issues/214#issuecomment-810829250
      - name: Reconfigure git to use HTTPS authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - run: npm ci --cache .npm --prefer-offline
        working-directory: client

      # there are two different scenarios in which different stuff should be tested:
      # - regular changes to Viper-IDE: the normal test configuration should be used, which tests against the latest stable and
      #   nightly ViperTool releases. Any change to the Viper-IDE have ensure compatability
      # - before releasing Viper-IDE together with some ViperTools, Viper-IDE has to be tested against the latest stable and
      #   nightly ViperTool releases AND the ViperTools that should be released.
      - name: Download ViperTools to test against (only downloading previously created ViperTools)
        if: ${{ contains(needs.create-viper-tools.result, 'success') }}
        uses: actions/download-artifact@v4
        with:
          name: ViperTools
          path: client/ViperTools

      - name: Setup ViperTools folder
        if: ${{ fromJSON(env.TEST_LOCAL_ON_PUSH_PR) && !contains(needs.create-viper-tools.result, 'success') }}
        run: mkdir -p client/ViperTools

      - name: Download ViperTools to test against (only downloading ViperTools for PUSH and PR operations if configured accordingly)
        if: ${{ fromJSON(env.TEST_LOCAL_ON_PUSH_PR) && !contains(needs.create-viper-tools.result, 'success') }}
        run: curl --fail --silent --show-error -L ${{ env.TEST_LOCAL_ON_PUSH_PR_VIPERTOOLS_URL }}/${{ matrix.viper-tools-zip-file }} --output ${{ matrix.viper-tools-zip-file }}
        working-directory: client/ViperTools

      - name: Unzip ViperTools (non-windows)
        if: ${{ !startsWith(matrix.os, 'windows') && (fromJSON(env.TEST_LOCAL_ON_PUSH_PR) || contains(needs.create-viper-tools.result, 'success')) }}
        run: unzip ${{ matrix.viper-tools-zip-file }} -d ExtractedTools
        working-directory: client/ViperTools

      - name: Unzip ViperTools (windows)
        if: ${{ startsWith(matrix.os, 'windows') && (fromJSON(env.TEST_LOCAL_ON_PUSH_PR) || contains(needs.create-viper-tools.result, 'success')) }}
        run: powershell Expand-Archive -LiteralPath ${{ matrix.viper-tools-zip-file }} -DestinationPath ExtractedTools
        working-directory: client/ViperTools

      - name: Download ViperServer JAR (only downloading ViperTools for PUSH and PR operations if configured accordingly)
        if: ${{ fromJSON(env.TEST_LOCAL_ON_PUSH_PR) && !contains(needs.create-viper-tools.result, 'success') }}
        run: curl --fail --silent --show-error -L ${{ env.TEST_LOCAL_ON_PUSH_PR_VIPERSERVER_URL }} --output viperserver.jar
        working-directory: client/ViperTools/ExtractedTools/backends

      - name: Create path to extracted tools (non-windows)
        if: ${{ !startsWith(matrix.os, 'windows') && (fromJSON(env.TEST_LOCAL_ON_PUSH_PR) || contains(needs.create-viper-tools.result, 'success')) }}
        run: |
          echo "EXTRACTED_TOOLS_PATH=${{ github.workspace }}/client/ViperTools/ExtractedTools" >> $GITHUB_ENV
        shell: bash

      - name: Create path to extracted tools (windows)
        if: ${{ startsWith(matrix.os, 'windows') && (fromJSON(env.TEST_LOCAL_ON_PUSH_PR) || contains(needs.create-viper-tools.result, 'success')) }}
        # replace all backslashes by double backslashes to properly escape them in the resulting JSON
        run: |
          PATH='EXTRACTED_TOOLS_PATH=${{ github.workspace }}\client\ViperTools\ExtractedTools'
          echo ${PATH//'\'/'\\'} >> $GITHUB_ENV
        shell: bash

      - name: Create an additional test config
        if: ${{ fromJSON(env.TEST_LOCAL_ON_PUSH_PR) || contains(needs.create-viper-tools.result, 'success') }}
        run: |
          mkdir -p client/src/test/data/settings
          echo '{
            "viperSettings.buildVersion": "External",
            "viperSettings.paths": {
              "v": "674a514867b1",
              "viperToolsPath": {
                "windows": "${{ env.EXTRACTED_TOOLS_PATH }}",
                "linux": "${{ env.EXTRACTED_TOOLS_PATH }}",
                "mac": "${{ env.EXTRACTED_TOOLS_PATH }}"
              }
            },
            "viperserver.trace.server": "verbose"
          }' > client/src/test/data/settings/external.json
        shell: bash

      - name: Get config content
        if: ${{ fromJSON(env.TEST_LOCAL_ON_PUSH_PR) || contains(needs.create-viper-tools.result, 'success') }}
        run: cat client/src/test/data/settings/external.json
        shell: bash

      - name: Run tests (headless - non-ubuntu)
        if: "!startsWith(matrix.os, 'ubuntu') && matrix.target != 'darwin-arm64'"
        run: npm run test --full-trace -- --target=${{ matrix.target }}
        working-directory: client
        env:
          VIPER_IDE_LOG_DIR: ${{ github.workspace }}/client/logs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests (headless - ubuntu only)
        if: startsWith(matrix.os, 'ubuntu') && matrix.target != 'darwin-arm64'
        run: xvfb-run -a npm run test --full-trace -- --target=${{ matrix.target }}
        working-directory: client
        env:
          VIPER_IDE_LOG_DIR: ${{ github.workspace }}/client/logs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Viper-IDE log files
        if: ${{ failure() || cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: TestLogs-${{ matrix.target }}
          path: client/logs

      - name: Clean 'dist' folder
        run: npm run clean
        working-directory: client
