// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

domain SetUnionComps {
    function __set__(x:Int): Set[Int]
    function __f__(elem: Int): Set[Int]
    function __g__(elem: Int, filter: Seq[Bool]): Set[Int]
    function ub_union(filter: Seq[Bool]): Set[Int]
    
    function exists_elem(elem: Int): Bool

    function __narrow__(bla: Set[Int]): Int

    axiom ax_ExistsElem {
        forall elem:Int :: { exists_elem(elem) } exists_elem(elem) <==> ( __f__(elem) != Set() )
    }

    axiom ax_Narrow {
        forall bla: Set[Int] :: { __narrow__(bla) }  __narrow__(bla) in bla
    }

    axiom ax_S {
        forall i: Int :: { __set__(i) } __set__(i) == Set(i,i+1) 
    }

    axiom ax_f_a {
        forall elem:Int, i:Int :: { i in __f__(elem) } i in __f__(elem) <==> elem in __set__(i)
    }

    axiom ax_f_b {
        forall elem:Int :: { __f__(elem) } ( forall i:Int :: { elem in __set__(i) } !(elem in __set__(i)) ) <==> __f__(elem) == Set()
    }

    axiom ax_g {
        forall elem:Int, i:Int, filter:Seq[Bool] :: 
            { i in __g__(elem,filter) } 
                i in __g__(elem,filter) <==> 
                    ( elem in __set__(i) ) && ( 0<=i && i<|filter| && (0<=i && i<|filter| ==> filter[i]) )
    }

    axiom ax_UnBoundedUnion_semantics {
        forall filter: Seq[Bool], elem:Int :: 
            
            { elem in ub_union(filter) } 

                elem in ub_union(filter) 
                    <==>  
                        ( __g__(elem,filter) != Set() ) // elem is present in at least one of the sets generated by __set__
                

                //0 <= elem && elem < |filter| ==> ( elem in ub_union(filter) <==> ( __f__(elem) != Set() ) && filter[elem] )

                //0 <= elem && elem < |filter| ==> ( elem in ub_union(filter) <==> ( elem in __set__(__narrow__(__f__(elem))) ) && filter[elem] )

                // 0 <= elem && elem < |filter| ==> ( elem in ub_union(filter) <==> (elem in __set__( __f__(elem) )) && filter[elem] )

    }

    axiom ax_UnBoundedUnion_size {
        forall filter: Seq[Bool] :: 

            { ub_union(filter) }

                | ub_union(filter) | <= | filter |
    }
}


domain Array {
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function loc_0(r: Ref): Array
    function loc_1(r: Ref): Int

    axiom array_length {
      forall a: Array :: { length(a) } length(a) >= 0
    }

    axiom array_injectivity {
        forall a: Array, i: Int :: 
            { loc(a,i) }
                loc_0(loc(a,i)) == a && loc_1(loc(a,i)) == i
    }
}

field f:Int

function $$false$$(a: Array): Seq[Bool]
    requires forall i:Int :: 0 <= i && i < length(a) ==> acc(loc(a,i).f)
    ensures |result| == length(a)
    ensures forall i:Int :: 0 <= i && i < length(a) ==> result[i] == false//( loc(a,i).f != 0 )

method smoke_test(a: Array)
    requires forall i:Int :: 0 <= i && i < length(a) ==> acc(loc(a,i).f)
{
    var x: Int
    assume 0 <= x && x < length(a)
    assume x in ub_union( $$false$$(a) ) 

    assert false // supposed to pass
}
method empty_set_test(a: Array)
    requires forall i:Int :: 0 <= i && i < length(a) ==> acc(loc(a,i).f)
{
    var x: Int
    assume 0 <= x && x < length(a)
    assume x in ub_union( $$false$$(a) ) union Set(0)

    assert x == 0

    assert false // supposed to fail
}

function $$(a: Array): Seq[Bool]
    requires forall i:Int :: 0 <= i && i < length(a) ==> acc(loc(a,i).f)
    ensures |result| == length(a)
    ensures forall i:Int :: 0 <= i && i < length(a) ==> result[i] == ( i == 2 )

method test(a: Array)
    requires forall i:Int :: 0 <= i && i < length(a) ==> acc(loc(a,i).f)
    requires length(a) == 10
{
    var x: Int
    assume 0 <= x && x < length(a)
    assume x in ub_union( $$(a) ) union Set(0)

    //assert x in ub_union( $$(a) )
    //assert x in __set__( __f__(x) )
    assert 0 <= x && x < |$$(a)|

    assert $$(a)[2] == true

    assert x in ub_union( $$(a) ) || x == 0

    assert x != 0 ==> x in ub_union( $$(a) )

    
    //assert x != 0 ==>   __f__(x) != Set() 

    
    
    assert __f__( 0) == Set(-1,0)
    assert __set__(-1) == Set(-1,0)
    assert __set__( 0) == Set( 0,1)

    assert __f__( 1) == Set(0,1)
    assert __set__( 0) == Set(0,1)
    assert __set__( 1) == Set(1,2)

    assert $$(a) == Seq(false, false, true, false, false, false, false, false, false, false)
    

    assert forall elem:Int, i:Int, filter:Seq[Bool] :: 
            { i in __g__(elem,filter) } 
                i in __g__(elem,filter) <==> 
                    ( elem in __set__(i) ) && ( 0<=i && i<|filter| && (0<=i && i<|filter| ==> filter[i]) )

    assert forall i:Int, filter:Seq[Bool] :: 
                i in __g__(2,filter) <==> 
                    ( 2 in __set__(i) ) && ( 0<=i && i<|filter| && (0<=i && i<|filter| ==> filter[i]) )

    //assert __g__( 2, $$(a) ) == Set()
    assert ub_union( $$(a) ) == Set(2,3)
    

    assert x != 0 ==> x == 2
    
    assert x == 0
}
